@page "/MudTable"
@using System
@using System.IO
@using System.Text
@using Microsoft.AspNetCore.Hosting
@inject IJSRuntime JS
@inject IWebHostEnvironment Environment
@inject ElementService ElementSvc
@inject IDialogService DialogSvc

<PageTitle>MudTable Sample</PageTitle>
@if (ErrorMessage != "")
{
    <MudAlert Severity="Severity.Error" Dense="true">@ErrorMessage</MudAlert>
}
<MudGrid>
    <MudItem xs="6" Class="mt-3 mb-0 py-0">
        <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles" Class="">
            <ButtonTemplate>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.CloudUpload"
                           for="@context"
                           Class="w-100 py-0 mt-0 mb-0">
                    Upload File
                </MudButton>
            </ButtonTemplate>
        </MudFileUpload>
    </MudItem>
    <MudItem xs="6" Class="mt-3 mb-0 py-0">
        <div class="mud-input-control">
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.CloudDownload"
                       Class="w-100 py-0 mt-0 mb-0"
                       OnClick="@Download">Download File</MudButton>
        </div>
    </MudItem>
    <MudItem xs="1" Class="mb-1 py-0">
        <MudIconButton Size="@Size.Medium" Icon="@Icons.Material.Outlined.Add" Style="" Class="" OnClick="@AddItem" />
    </MudItem>
    <MudItem xs="11" Class="mb-1 py-0">
        <MudTextField @bind-Value="SearchString"
                      Placeholder="検索"
                      Adornment="Adornment.Start"
                      Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Small"
                      Style="margin: 0;"></MudTextField>
    </MudItem>
</MudGrid>
<MudTable Breakpoint="Breakpoint.None"
          T="Element"
          Items="@Elements"
          ReadOnly="@false"
          Bordered="true"
          Dense="true"
          Filter="QuickFilter"
          HeaderClass="table-header"
          RowClassFunc="@RowClassFunc">

    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh>Sign</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Molar mass</MudTh>
        <MudTh>Melting point</MudTh>
        <MudTh>Boiling point</MudTh>
        <MudTh>Edit/Del</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nr">@context.Number</MudTd>
        <MudTd DataLabel="Sign">@context.Sign</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Molar mass">@context.Molar</MudTd>
        <MudTd DataLabel="Molar mass">@context.MeltingPoint</MudTd>
        <MudTd DataLabel="Molar mass">@context.BoilingPoint</MudTd>
        <MudTd DataLabel="Molar mass">
            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => EditItem(context))" />
            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => DeleteItem(context))" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private IEnumerable<Element> Elements = new List<Element>();
    private string SearchString = "";
    private string ErrorMessage = "";

    private async Task UploadFiles(IBrowserFile _file)
    {
        var fs = _file.OpenReadStream();
        if (fs is null)
        {
            return;
        }

        var ret = await ElementSvc.LoadfromCSV(fs);
        if (ret.sucsess)
        {
            var options = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };
            var parameters = new DialogParameters();
            parameters.Add("Befor", await ElementSvc.GetElementBeforAsync());
            parameters.Add("Dif", await ElementSvc.GetElementDifAsync());

            var dialog = DialogSvc.Show<CSVConfirmDialog>("Confirm", parameters, options);
            var result = await dialog.Result;
            if (result.Canceled)
            {
                ElementSvc.Cancel();
            }
            else
            {
                ElementSvc.Commit();
            }
        }
        else
        {
            var parameters = new DialogParameters();
            parameters.Add("ErrorMessage", ret.err_msg);

            DialogSvc.Show<ErrorDialog>("Error", parameters);
        }
    }

    private string RowClassFunc(Element _element, int _index)
    {
        // This can be achieved with the Striped property, 
        // but we dare to use RowClassFunc for more complex cases.
        if (_element.Number % 2 == 0)
        {
            return "target";
        }
        else
        {
            return "";
        }
    }

    private bool QuickFilter(Element _element)
    {
        if (string.IsNullOrWhiteSpace(SearchString))
        {
            return true;
        }

        if ($"{_element.Sign} {_element.Name} {_element.Number} {_element.Molar} {_element.MeltingPoint} {_element.BoilingPoint}".Contains(SearchString))
        {
            return true;
        }

        return false;
    }

    protected override async Task OnInitializedAsync()
    {
        var tmp = await ElementSvc.GetElementAsync();
        Elements = tmp.AsEnumerable();
    }

    private async Task Download()
    {
        try
        {
            using (var stream = new MemoryStream())
            using (var writer = new StreamWriter(stream, Encoding.UTF8))
            {
                var file_name = "Elements.csv";
                await ElementSvc.WriteCSV(writer);
                stream.Seek(0, SeekOrigin.Begin);

                await JS.InvokeVoidAsync("DownloadFileFromStream", file_name, new DotNetStreamReference(stream: stream));
            }
        }
        catch (Exception _ex)
        {
            ErrorMessage = _ex.Message;
            StateHasChanged();
        }
    }

    private async Task AddItem()
    {
        var parameters = new DialogParameters();
        parameters.Add("IsEdit", false);

        var dialog = DialogSvc.Show<CreateUpdateDialog>("Create", parameters);
        var result = await dialog.Result;
        if (!result.Canceled && (dialog.Dialog is not null) && (dialog.Dialog is CreateUpdateDialog cu_dialog))
        {
            await ElementSvc.AddElement(cu_dialog.EditData);
        }
    }

    private async Task EditItem(Element _item)
    {
        var parameters = new DialogParameters();
        parameters.Add("IsEdit", true);
        parameters.Add("InputData", _item);

        var dialog = DialogSvc.Show<CreateUpdateDialog>("Edit", parameters);
        var result = await dialog.Result;
        if (!result.Canceled && (dialog.Dialog is not null) && (dialog.Dialog is CreateUpdateDialog cu_dialog))
        {
            await ElementSvc.EditElement(cu_dialog.EditData);
        }
    }

    private async Task DeleteItem(Element _item)
    {
        var parameters = new DialogParameters();
        parameters.Add("EditData", _item);

        var dialog = DialogSvc.Show<DeleteConfirmDialog>("Confirm", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await ElementSvc.DeleteElement(_item);
        }
    }
}
