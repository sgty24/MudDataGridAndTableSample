@page "/"
@inject ElementService ElementSvc
@inject IDialogService DialogSvc

<PageTitle>MudDataGrid Sample</PageTitle>
<MudGrid>
    <MudItem xs="1" Class="">
        <MudIconButton Size="@Size.Medium" Icon="@Icons.Material.Outlined.Add" Style="" Class="" OnClick="@AddItem" />
    </MudItem>
    <MudItem xs="11" Class="">
        <MudTextField @bind-Value="SearchString"
                      Placeholder="検索"
                      Adornment="Adornment.Start"
                      Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Small"
                      Style="margin: 0;"></MudTextField>
    </MudItem>
</MudGrid>
<MudDataGrid Breakpoint="Breakpoint.None"
             T="Element"
             Items="@Elements"
             ReadOnly="@false"
             EditMode="@DataGridEditMode.Form"
             CommittedItemChanges="@CommittedItemChanges"
             Bordered="true" g
             Dense="true"
             EditTrigger="@DataGridEditTrigger.Manual"
             QuickFilter="@QuickFilter"
             RowClassFunc="@RowClassFunc">
    <Columns>
        <Column T="Element" Field="Number" Title="Nr" IsEditable="false" Sortable="false" />
        <Column T="Element" Field="Sign" Sortable="false" />
        <Column T="Element" Field="Name" Sortable="false" />
        <Column T="Element" Field="Molar" Title="Molar mass" Sortable="false" />
        <Column T="Element" Field="MeltingPoint" Title="Melting point" Sortable="false" />
        <Column T="Element" Field="BoilingPoint" Title="Boiling point" Sortable="false" />
        <Column T="Element" Sortable="false">
            <CellTemplate>
                <MudStack Row="true">
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItem" />
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => DeleteItem(context.Item))" />
                </MudStack>
            </CellTemplate>
        </Column>
    </Columns>
</MudDataGrid>

@code {
    private IEnumerable<Element> Elements = new List<Element>();
    private string SearchString = "";

    private Func<Element, int, string> RowClassFunc => (_element, _index) =>
    {
        //If using Func<T>, we can be switch RowClassFunc depending on the situation.
        if (_element.Number % 2 == 0)
        {
            return "target";
        }
        else
        {
            return "";
        }
    };

    private Func<Element, bool> QuickFilter => _element =>
    {
        if (string.IsNullOrWhiteSpace(SearchString))
        {
            return true;
        }

        if ($"{_element.Sign} {_element.Name} {_element.Number} {_element.Molar} {_element.MeltingPoint} {_element.BoilingPoint}".Contains(SearchString))
        {
            return true;
        }

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        var tmp = await ElementSvc.GetElementAsync();
        Elements = tmp.AsEnumerable();
    }

    private async Task CommittedItemChanges(Element _item)
    {
        await ElementSvc.EditElement(_item);
    }

    private async Task AddItem()
    {
        var parameters = new DialogParameters();
        parameters.Add("IsEdit", false);

        var dialog = DialogSvc.Show<CreateUpdateDialog>("Delete Server", parameters);
        var result = await dialog.Result;
        if (!result.Canceled && (dialog.Dialog is not null) && (dialog.Dialog is CreateUpdateDialog cu_dialog))
        {
            await ElementSvc.AddElement(cu_dialog.EditData);
        }
    }

    private async Task DeleteItem(Element _item)
    {
        var parameters = new DialogParameters();
        parameters.Add("EditData", _item);

        var dialog = DialogSvc.Show<DeleteConfirmDialog>("Confirm", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await ElementSvc.DeleteElement(_item);
        }
    }
}
